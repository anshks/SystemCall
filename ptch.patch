diff -ruN original/linux-3.16.0/arch/x86/syscalls/syscall_32.tbl linux-3.16.0/arch/x86/syscalls/syscall_32.tbl
--- original/linux-3.16.0/arch/x86/syscalls/syscall_32.tbl	2019-09-27 19:23:23.480859669 +0530
+++ linux-3.16.0/arch/x86/syscalls/syscall_32.tbl	2019-09-28 11:02:39.640731956 +0530
@@ -361,3 +361,4 @@
 352	i386	sched_getattr		sys_sched_getattr
 353	i386	renameat2		sys_renameat2
 354	i386	seccomp			sys_seccomp
+355	i386	sh_task_info		sys_sh_task_info
diff -ruN original/linux-3.16.0/arch/x86/syscalls/syscall_64.tbl linux-3.16.0/arch/x86/syscalls/syscall_64.tbl
--- original/linux-3.16.0/arch/x86/syscalls/syscall_64.tbl	2019-09-27 19:23:23.480859669 +0530
+++ linux-3.16.0/arch/x86/syscalls/syscall_64.tbl	2019-09-28 11:03:07.616731893 +0530
@@ -362,3 +362,4 @@
 542	x32	getsockopt		compat_sys_getsockopt
 543	x32	io_setup		compat_sys_io_setup
 544	x32	io_submit		compat_sys_io_submit
+545	64	sh_task_info		sys_sh_task_info
diff -ruN original/linux-3.16.0/include/linux/syscalls.h linux-3.16.0/include/linux/syscalls.h
--- original/linux-3.16.0/include/linux/syscalls.h	2019-09-27 19:23:31.876859650 +0530
+++ linux-3.16.0/include/linux/syscalls.h	2019-09-28 11:04:43.588731675 +0530
@@ -868,4 +868,5 @@
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
 asmlinkage long sys_seccomp(unsigned int op, unsigned int flags,
 			    const char __user *uargs);
+asmlinkage long sys_sh_task_info(int pidt, char *filename);
 #endif
diff -ruN original/linux-3.16.0/Makefile linux-3.16.0/Makefile
--- original/linux-3.16.0/Makefile	2019-09-27 19:23:22.700859671 +0530
+++ linux-3.16.0/Makefile	2019-09-28 11:01:16.624732144 +0530
@@ -850,7 +850,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -ruN original/linux-3.16.0/sh_task_info/Makefile linux-3.16.0/sh_task_info/Makefile
--- original/linux-3.16.0/sh_task_info/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.16.0/sh_task_info/Makefile	2019-09-28 10:58:56.676732462 +0530
@@ -0,0 +1 @@
+obj-y := sh_task_info.o
diff -ruN original/linux-3.16.0/sh_task_info/sh_task_info.c linux-3.16.0/sh_task_info/sh_task_info.c
--- original/linux-3.16.0/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.16.0/sh_task_info/sh_task_info.c	2019-09-28 10:58:56.676732462 +0530
@@ -0,0 +1,95 @@
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/syscalls.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/fcntl.h>
+#include <asm/uaccess.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+
+asmlinkage long sys_sh_task_info(int pidt, char *filename)
+{
+
+	struct task_struct *task;
+	int flag = 0;
+	struct file *file;
+	loff_t pos = 0;
+	int fd;
+
+	char buffer[2048];
+
+	mm_segment_t old_fs = get_fs();
+	set_fs(KERNEL_DS);
+
+	fd = sys_open(filename, O_WRONLY|O_CREAT, 0644);
+
+	for_each_process(task)
+	{
+		if (pidt==(task->pid))
+		{
+			flag = 1;
+			printk(KERN_WARNING "\nPROCESS: %s\n \
+					  PID_NUMBER: %ld\n \
+					  PROCESS STATE: %ld\n \
+					  PRIORITY: %ld\n \
+					  RT_PRIORITY: %ld\n \
+					  STATIC PRIORITY: %ld\n \
+					  NORMAL PRIORITY: %ld\n",
+					  task->comm, \
+					  (long)task_pid_nr(task), \
+					  (long)task->state, \
+					  (long)task->prio, \
+					  (long)task->rt_priority, \
+					  (long)task->static_prio, \
+					  (long)task->normal_prio, \
+					  );
+
+			char *otpt;
+
+			sprintf(buffer, "\nProcess: %s\n \
+				PID_NUMBER: %ld\n \
+				PROCESS STATE: %ld\n \
+				PRIORITY: %ld\n \
+				RT_PRIORITY: %ld\n \
+				STATIC PRIORITY: %ld\n \
+				NORMAL PRIORIY: %ld\n",
+				task->comm, (long)task_pid_nr(task), \
+				(long)task->state, (long)task->prio, \
+				(long)task->rt_priority, (long)task->static_prio, \
+				(long)task->normal_prio);
+
+			otpt = buffer;
+
+			// Check if given file exists
+			if (fd>=0)
+			{
+				sys_write(fd, buffer, strlen(buffer));
+				file = fget(fd);
+
+				if (file)
+				{
+					vfs_write(file, buffer, strlen(buffer), &pos);
+					fput(file);
+				}
+				sys_close(fd);
+			}
+			else
+			{
+				return -ENOENT;
+			}
+		}
+	}
+
+	set_fs(old_fs);
+
+	// Input task pid does not exist
+	if (flag==0)
+	{
+		return -ESRCH;
+	}
+
+	return 0;
+}
